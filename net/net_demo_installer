#!/bin/bash

USAGE=$'Usage: '$0' [OPTIONS]

OPTIONS:
    -c => clear any script related auto-generated files
    -h => display help
    -a => run in ACI mode
    -r => restart mode
    -l => run in l3 router mode'

HOST_INVENTORY_FILE="./.gen/contiv_hosts"
HOST_LOG_FILE="./.gen/hosts.log"
HOST_SUDO_LOG_FILE="./.gen/hosts_sudo.log"
HOST_IP_LOG_FILE="./.gen/host_ip.log"
HOST_SETUP_LOG_FILE="./.gen/setup.log"
NODE_INFO_FILE="./.gen/node_info"
ENV_FILE="./.gen/env.json"
ANSIBLE_SITE_FILE="./ansible/site.yml"
ANSIBLE_CLEANUP_FILE="./ansible/cleanup.yml"
NETPLUGIN_HOSTGROUP="netplugin-node"
CFG_FILE=${CFG_FILE:-"./cfg.yml"}
INTERACTIVE_MODE=${INTERACTIVE_MODE:-"yes"}

SAMPLE_CFG_FILE_URL="https://raw.githubusercontent.com/contiv/demo/master/net/extras/sample_cfg.yml"
SAMPLE_ACI_CFG_FILE_URL="https://raw.githubusercontent.com/contiv/demo/master/net/extras/sample_aci_cfg.yml"
INVENTORY_GEN_URL="https://raw.githubusercontent.com/contiv/demo/master/net/extras/genInventoryFile.py"
ANSIBLE_SHA_VERSION=${ANSIBLE_SHA_VERSION:-"latest"}

args=( "$@" )
network_mode="Standalone"
restart_mode=false
ans_opts=
fwd_mode="bridge"

declare -A node_if
declare -A node_ip

# Helper function to shift arguments to move past options
function ShiftArgs {
    unset args[0]
    args=( "${args[@]}" )
}

# Function to parse the arguments
function ParseInventoryFile {
    for ((i=1; i<=$num_nodes; i++)); do
        node_info=$(cat $HOST_INVENTORY_FILE | grep node$i)
        node_name=node$i
        node_ip[$node_name]=$(echo $node_info | cut -f2 -d' ' | cut -f2 -d=)
        node_if[$node_name]=$(echo $node_info | cut -f4 -d' ' | cut -f2 -d=)
    done
}

# Function to get user confirmation to proceed
function ConfirmPrompt {
  # wait for user input if running in interactive mode, else pick
  # the default value passed by the caller
  if [ "$INTERACTIVE_MODE" != "yes" ]; then
      if [ "$1" == "n" ]; then
          echo "interactive mode was turned off, assuming not to proceed"
          exit 1
      else
          echo "interactive mode was turned on, assuming ok to proceed"
          return
      fi
  fi

  while true; do
  read -p "Ready to proceed(y/n)? " choice
  if [ "$choice" == "y" ]; then
      break
  fi

  if [ "$choice" == "n" ]; then
      echo "Try again when you are ready."
      exit 1
  else
      echo "Please answer y or n"
      continue
  fi
  done
}

# Function to generate inventory file
function GenerateInventoryFile {
	if [ ! -e ./genInventoryFile.py ]; then
	    $(wget $INVENTORY_GEN_URL)
	    chmod +x ./genInventoryFile.py
	fi

    ./genInventoryFile.py $CFG_FILE $HOST_INVENTORY_FILE $NODE_INFO_FILE $network_mode $fwd_mode
    if [ $? -ne 0 ]; then
        echo "Fatal: error parsing "$CFG_FILE" and generating inventory file"
        exit 1
    fi
}

function GetLinuxOS {
    awk -F= '/^NAME/{print $2}' /etc/os-release | sed 's/"//g'
}

function GetOSVersion {
    awk -F= '/^VERSION_ID/{print $2}' /etc/os-release | sed 's/"//g'
}

function CheckOSType {
    if [[ ! ${1} =~ ^(Ubuntu|CentOS) ]]; then
        echo OS not supported. exptd: 'Ubuntu' or 'CentOS', rcvd ${1}
        return 1
    fi
    echo OS is supported.
    return 0
}

function CheckOSVersion {
    if [[ ! ${1} =~ ^${2} ]]; then
        echo OS version mismatch. exptd: ${2}, rcvd: ${1}
        return 1
    fi
    echo OS version matched.
    return 0
}

function CheckOSTypeAndVersion {
    os=${1:-$(GetLinuxOS)}
    if ! CheckOSType "${os}"; then
        exit 1
    fi

    ver=${2:-$(GetOSVersion)}
    if [[ ${os} =~ ^Ubuntu ]]; then
        if ! CheckOSVersion ${ver} "15.*"; then
            exit 1
        fi
    fi
    if  [[ ${os} =~ ^CentOS ]]; then
        if ! CheckOSVersion ${ver} "7.*"; then
            exit 1
        fi
    fi
}

function sudoExec() {
    sudo -E $@
}

: ${contiv_network_version:=v0.1-05-19-2016.08-34-56.UTC}
echo "Using version: $contiv_network_version"

docker_version="1.11.1"

set -x
# Check OS type and version
CheckOSTypeAndVersion

OS_TYPE=$(GetLinuxOS)
if [[ ${OS_TYPE} =~ ^Ubuntu ]]; then
    # Install python, pip and ansible
    sudoExec apt-get update
    sudoExec apt-get install wget git build-essential python-dev software-properties-common -y
    sudoExec apt-add-repository -y ppa:ansible/ansible
    sudoExec apt-get install -y ansible
fi

if  [[ ${OS_TYPE} =~ ^CentOS ]]; then
    sudoExec yum install -y epel-release epel-testing git wget
    sudoExec yum --enablerepo='epel-testing' install -y ansible
    docker_version="1.10.3"
fi

if [ "$(which ansible)" == "" ]; then
    echo "Fatal: ansible installation failed!\n"
    exit 1
fi
set +x

# Check if user want to clear all files generated by previous run of install script
while getopts "carhl" opt; do
    case $opt in
	c)
	    echo "Clear option is set to clear all files generated by the script... "
	    echo "This will clear the ansible repository and files in .gen folder: "
	    ls .gen/
	    ConfirmPrompt "y"
	    $(rm -rf .gen/)
	    $(rm -rf ansible/)
	    exit 0
	    ;;
	a)
            network_mode="ACI"
            ShiftArgs
	    ;;
	r)
	    restart_mode=true
	    ShiftArgs
	    ;;
  h)
      echo "$USAGE"
      exit 0
      ;;
  l)
      fwd_mode="routing"
      ShiftArgs
      ;;
	?)
	    echo "Invalid option: -$OPTARG" >&2
            echo "$USAGE"
	    exit 1
	    ;;
    esac
done

# Check for usage arguments
if [ ${#args[@]} -ge 1 ]; then
    echo "Unexpected arguments"
    echo "$USAGE"
    exit 1
fi

# Check for config file. If missing generate a sample config file if prompted by user
if ! [ -e $CFG_FILE ]; then
    echo $CFG_FILE 'missing.
Please follow the instructions in the README to fill in the details in the configuration file.
Do you want to generate a sample config file:'
    ConfirmPrompt "n"

    echo $'\nPlease fill in the necessary details and rerun the installer again...\n'
    if [ $network_mode == "ACI" ]; then
        $(wget $SAMPLE_ACI_CFG_FILE_URL -O $CFG_FILE)
    else
        $(wget $SAMPLE_CFG_FILE_URL -O $CFG_FILE)
    fi
    exit 1
fi

# Create folder to hold all generated files
mkdir .gen > /dev/null 2>&1

echo "Parsing config file..."
# Generate inventory file
GenerateInventoryFile

num_nodes=$(cat $NODE_INFO_FILE)

# Parse Inventory file to fetch node information
ParseInventoryFile

echo " "
echo "             ==== Contiv Netplugin Demo Installer ===="
echo " "
echo "Netplugin Cluster will be set up on the following servers in "$network_mode" mode: "
echo " "
for ((i=1; i<=$num_nodes; i++)); do
    echo "  ${node_ip[node$i]}  "
done
echo " "
echo " "

ConfirmPrompt "y"

set -xe
# Check and pull ansible repository
if [ -d "ansible" ]; then
    cd ansible
    git pull --rebase origin
    cd ..
else
    git clone https://github.com/karamsivia/ansible.git
fi
# Update to the provided sha1 of ansible repo, if one is provided
if [ "${ANSIBLE_SHA_VERSION}" != "latest" ]; then
    cd ansible
    git reset --hard ${ANSIBLE_SHA_VERSION}
    cd ..
fi
set +xe

# Prepare ansible for auth expectations
echo "\
[defaults]
host_key_checking = False" > ~/.ansible.cfg

# Verify ansible can reach all hosts
echo "Verifying ansible reachability"
ansible all -i $HOST_INVENTORY_FILE -m setup -a 'filter=ansible_distribution*' >& $HOST_LOG_FILE
egrep 'FAIL|UNREACHABLE' $HOST_LOG_FILE >& /dev/null
if [ $? -eq 0 ]; then
   echo "WARNING"
   echo "WARNING Some of the hosts are not accessible via passwordless SSH"
   echo "WARNING"
   echo "`egrep 'FAIL|UNREACHABLE' $HOST_LOG_FILE`"
   echo " "
   echo "This means either the host is unreachable or passwordless SSH is not"
   echo "set up for it. It is RECOMMENDED that you resolve this before"
   echo "proceeding. If this is JUST a passwordless SSH issue, you may choose"
   echo "to proceed and respond to password prompts(there would a multitude"
   echo "of those...)"

   ConfirmPrompt "n"
   ans_opts=k
fi

# Verify OS versions on all hosts
echo "Verifying OS versions on all hosts..."
set -x
items=$(awk -F: '/(\<ansible_distribution\>|\<ansible_distribution_version\>)/{print $2}' .gen/hosts.log | sed 's/[",]//g')
i=0; os=""; ver="";
for item in ${items[@]}; do
    if [ "${i}" == "0" ]; then
        os=${item}
        i=1
    else
        ver=${item};
        CheckOSTypeAndVersion ${os} ${ver}
        i=0
    fi
done
set +x

echo "Verifying sudo access on all hosts..."
ansible all -i $HOST_INVENTORY_FILE -a "sudo -n /bin/cat /etc/sudoers" >& $HOST_SUDO_LOG_FILE
res=`egrep 'FAIL|UNREACHABLE' $HOST_SUDO_LOG_FILE`
if [ ! -z "$res" ]; then
   echo "WARNING Some of the hosts do not have passwordless sudo enabled"
   echo "WARNING"
   echo "`egrep 'FAIL|UNREACHABLE' $HOST_SUDO_LOG_FILE`"
   echo " "
   echo "It is RECOMMENDED that you resolve this before proceeding. However,"
   echo "you may choose to proceed and respond to password prompts (there "
   echo "could be a multitude of those...)"
   echo " "

   ConfirmPrompt "n"
   ans_opts=K$ans_opts
fi

if [ ! -z "$ans_opts" ]; then
   ans_opts=-$ans_opts
fi

echo ""
echo "Ansible access and OS version verification completed on all hosts"
set -e

echo "-----------------"
echo "Contents of $HOST_INVENTORY_FILE:"
echo "-----------------"
cat $HOST_INVENTORY_FILE
echo "-----------------"

# Get IP of all nodes
rm -rf $HOST_IP_LOG_FILE
for ((i=1; i<=$num_nodes; i++)); do
    ansible node$i -m setup $ans_opts -i $HOST_INVENTORY_FILE | grep -A 4 ansible_${node_if[node$i]} | grep address | awk -F \" '{print $4}' >> $HOST_IP_LOG_FILE
done

# Use netmaster's default ip as service vip
master_node=node1
svc_vip=$(ansible $master_node -m setup $ans_opts -i $HOST_INVENTORY_FILE | grep -A 4 ansible_${node_if[$master_node]} | grep address | awk -F \" '{print $4}')
no_proxy=$(sed ':a;N;$!ba;s/\n/,/g' $HOST_IP_LOG_FILE)",127.0.0.1,localhost,netmaster"
env=$(cat << EOF
{
  "docker_version":"${docker_version}",
  "contiv_network_version":"${contiv_network_version}",
  "env":{
    "http_proxy":"${http_proxy}",
    "HTTP_PROXY":"${http_proxy}",
    "https_proxy":"${https_proxy}",
    "no_proxy":"${no_proxy}"
  },
  "etcd_peers_group": "${NETPLUGIN_HOSTGROUP}",
  "service_vip": "${svc_vip}",
  "validate_certs": "no"
}
EOF
)
echo ${env} > $ENV_FILE

if $restart_mode; then
    echo "In restart mode"
    echo "Removing containers"
    set +e
    DOCKER_HOST=$(sudoExec docker -H unix:///var/run/docker.sock ps --no-trunc -f name=swarm-manager | grep "\--advertise=[0-9,.]*\:[0-9]*" -o | awk -F= '{print $2}')
    removeList=$(docker ps -a | grep -v swarm | awk '{ print $1 }' | grep -v CONTAIN)
    docker rm -f $removeList > /dev/null 2>&1
    if ! [ $(docker ps -aq | wc -w) ]; then
        sudoExec docker stop $(docker ps -aq) > /dev/null 2>&1
        sudoExec docker rm $(docker ps -aq) > /dev/null 2>&1
    fi
    set -e
    echo "Stopping all services"
    ansible-playbook $ans_opts -i $HOST_INVENTORY_FILE  -e "`cat $ENV_FILE`" $ANSIBLE_CLEANUP_FILE
fi

# Execute ansible-playbook to install the necessary services on the nodes
echo "Setting up services on nodes"
ansible-playbook $ans_opts -i $HOST_INVENTORY_FILE  -e "`cat $ENV_FILE`" $ANSIBLE_SITE_FILE

# Bring up containers for demo when provisioning in ACI mode
if [ $network_mode == "ACI" ]; then
    sudoExec docker pull jainvipin/web
    sudoExec docker tag -f jainvipin/web web
    sudoExec docker pull jainvipin/redis
    sudoExec docker tag -f jainvipin/redis redis
fi

# Verify if the installation is successful by checking status of installed services
set -x
# validate swarm container is running
DOCKER_HOST=$(sudoExec docker -H unix:///var/run/docker.sock ps --no-trunc -f name=swarm-manager | grep "\--advertise=[0-9,.]*\:[0-9]*" -o | awk -F= '{print $2}')
if [ -z "${DOCKER_HOST}" ]; then
  echo "swarm status does not look correct. Please retry install."
  exit 1
fi
# validate swarm cluster membership
if [ $(sudoExec docker -H ${DOCKER_HOST} info | grep Nodes: | awk '{print $2}') != "${num_nodes}" ]; then
    echo "swarm cluster doesn't seem to be formed. Please cleanup using -r flag and retry install."
    exit 1
fi
set +x

echo "Install complete."
echo "========================================================="
echo " "
echo "Please export DOCKER_HOST=${DOCKER_HOST} in your shell before proceeding"
echo " "
echo "========================================================="
